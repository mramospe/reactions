#!/bin/bash

# help message
usage=$(cat <<EOF
Execute actions in the current repository.

Usage: ./repository options...

Main arguments:

-h|--help: print this message and exit
-b|--build-cpp: build the project under a "build" directory. It can be used together with "--clean".
-p|--build-python: build the python package in development mode (assumes to be within a virtual environment)
-d|--build-docs: build the documentation (inside docs/build)
-t|--format: apply the format
-c|--clean: clean the repository of temporary files, caches, build directories, ...
-f|--force: when specified before any number of commands described above, forces their execution, without any further interaction with the user

Subcommands:

changelog: generate a log file of changes forwarding the arguments to github_changelog_generator (tip: specify output files with -o and reference tags with --since-tag and --due-tag)
EOF
     )

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
	-h|--help)
	    echo "$usage"
	    exit 0
	    ;;
	-b|--build-cpp)

	    echo "Build project"
	    mkdir -p build
	    cd build
	    cmake ../ -DINSTALL_TESTS=ON
	    make -j $[$(($(nproc) - 1)) | 1] install
	    cd ..
	    if [ ! $? -eq 0 ]; then
		echo "ERROR: compilation failed"
		exit 1
	    fi
	    shift
	    ;;
	-t|--format)

	    echo "Formatting files"
	    python setup.py apply_format --regex '(docs|python|include|test|scripts)'
	    if [ $? -eq 0 ]; then
		echo "Successfully formatted files"
	    else
		echo "ERROR: Failed to format files"
		exit 1
	    fi
	    shift
	    ;;

	-c|--clean)

	    echo "Running \"make clean\" in the documentation directory"
	    (cd $(dirname "$0")/docs && make clean && cd - &> /dev/null)
	    if [ $? -eq 0 ]; then
		echo "Removal executed successfully"
	    else
		echo "ERROR: Failed to remove documentation files"
		exit 1
	    fi
	    
	    # determine the files to remove
	    files=($(find . -regex '.*\(build\|\.pyc\|__pycache__\|\.so\|cache.*\|~\)$'))

	    if [[ ! -z "$files" ]]; then

		echo "Will remove the additional files:"
		for f in ${files[@]}; do
		    echo " - $f"
		done

		if [ -z $force ]; then
		    read -e -p "In total, ${#files[@]} files will be removed. Proceed? (Y/n): " action
		    while [[ $action != "Y" && $action != "n" ]]; do
			read -e -p "Invalid argument \"$action\". Please answer Y or n: " action
		    done
		fi

		if [[ $action == "Y" || $force == "true" ]]; then
		    # remove the files
		    for f in ${files[@]}; do
			if [[ -f $f || -d $f ]]; then
			    rm -r $f
			fi
		    done

		    if [ $? -eq 0 ]; then
			echo "Files removed successfully"
		    else
			echo "ERROR: Failed to remove some files"
			exit 1
		    fi
		fi
	    else
		echo "No additional files found to remove"
	    fi
	    shift
	    ;;
	-p|--build-python)

	    echo "Build python package"
	    pip install --force-reinstall -e .
	    if [ ! $? -eq 0 ]; then
		echo "ERROR: Unable to install as a python package"
		exit 1
	    fi
	    shift
	    ;;

	-d|--build-docs)

	    echo "Create documentation"
	    cd docs
	    make html
	    cd -
	    if [ ! $? -eq 0 ]; then
		echo "ERROR: Failed to build the documentation"
		exit 1
	    fi
	    shift
	    ;;

	--force|-f)

	    echo "Forcing the execution of the following commands"
	    force=true
	    shift
	    ;;

	changelog)

	    hash github_changelog_generator 2>/dev/null || {
		echo >&2 "I require github_changelog_generator but it's not installed. You can install it via

sudo apt-get install ruby-full
gem install github_changelog_generator

Aborting";
		exit 1;
	    }

	    echo "Running GitHub changelog generator"
	    github_changelog_generator -u mramospe -p reactions $@
	    if [ $? ]; then exit 0; else exit 1; fi
	    ;;

	*)
	    echo "ERROR: Unknown argument \"$key\""
	    exit 1
	    ;;
    esac
done
