/*! \file
  \brief Classes and functions to work with elements from the Particle Database
  Group (PDG) and manage the database service.
*/
#pragma once

#include <cmath>
#include <tuple>

#include "reactions/database.hpp"
#include "reactions/exceptions.hpp"
#include "reactions/fields.hpp"
#include "reactions/tokens.hpp"
#include "reactions/units.hpp"
#include "reactions/utils.hpp"

namespace reactions {

  /// Structures representing the fields of a \ref reactions::pdg_element object
  namespace pdg {

    /// Range of a variable in a file
    template <std::size_t Min, std::size_t Max>
    using range = reactions::fields::range<Min, Max>;

    /// Range of a composite variable in a file
    template <class... R>
    using range_collection = reactions::fields::range_collection<R...>;

    /// Field for the name
    struct name {
      static constexpr const char *title = "name";
      using value_type = std::string;
      using units_reference_type = units::none;
      using range_type = range<0, 18>;
    };
    /// Field for the PDG ID
    struct pdg_id {
      static constexpr const char *title = "pdg_id";
      using value_type = int;
      using units_reference_type = units::none;
      using range_type = range<19, 29>;
    };
    /// Field the charge multiplied by three
    struct three_charge {
      static constexpr const char *title = "three_charge";
      using value_type = int;
      using units_reference_type = units::none;
      using range_type = range<30, 32>;
    };
    /// Field for the mass
    struct mass {
      static constexpr const char *title = "mass";
      using value_type = reactions::fields::ves_double_opt;
      using units_reference_type =
          units::reference<energy_units, energy_units::GeV>;
      using range_type =
          range_collection<range<33, 49>, range<50, 59>, range<60, 69>>;
    };
    /// Field for the width
    struct width {
      static constexpr const char *title = "width";
      using value_type = reactions::fields::ves_double_opt;
      using units_reference_type =
          units::reference<energy_units, energy_units::GeV>;
      using range_type =
          range_collection<range<70, 86>, range<87, 96>, range<97, 106>>;
    };
    /// Field to store the self charge-conjugate state
    struct is_self_cc {
      static constexpr const char *title = "is_self_cc";
      using value_type = bool;
      using units_reference_type = units::none;
      using range_type = range<107, 108>;
    };
  } // namespace pdg

  /*! \brief Defines a singleton to handle the units of PDG elements
   *
   * This class affects the values returned by the \ref pdg_element
   * objects, scaling them according to the units defined by the user.
   */
  class pdg_system_of_units final {

  public:
    /// Get the only instance of this class
    static pdg_system_of_units &instance() {
      static pdg_system_of_units sou;
      return sou;
    }

    /// Get the energy units
    energy_units get_energy_units() const { return m_energy_units; }

    /// Access the given units
    template <class Units> Units units() const {
      if constexpr (std::is_same_v<Units, energy_units>)
        return get_energy_units();
      else
        // can not use "false" directly because it would be ill-formed
        static_assert(reactions::utils::dependent_false_v<Units>,
                      "Invalid units");
    }

    /// Set the energy units
    void set_energy_units(energy_units u) {

      if (u == energy_units::unknown_energy_units)
        throw value_error("Setting energy units to unknown");

      m_energy_units = u;
    }

  private:
    /// Units of energy
    energy_units m_energy_units = energy_units::GeV;

    pdg_system_of_units() {}
    pdg_system_of_units(pdg_system_of_units &&) = delete;
    pdg_system_of_units(pdg_system_of_units const &) = delete;
    void operator=(pdg_system_of_units &&) = delete;
    void operator=(pdg_system_of_units const &) = delete;
  };

  /// Field types of a PDG element
  using pdg_element_fields =
      std::tuple<pdg::name, pdg::pdg_id, pdg::three_charge, pdg::mass,
                 pdg::width, pdg::is_self_cc>;

  /// Base class of a PDG element
  using pdg_element_base = fields::underlying_types_t<pdg_element_fields>;

  /*! \brief A PDG particle, based on the fields of a particle in the PDG
   * database.
   */
  class pdg_element final : protected pdg_element_base {

  public:
    /// Base class
    using base_type = pdg_element_base;

    /// Fields of the element
    using fields_type = pdg_element_fields;

    /// Number of data fields
    static const size_t number_of_fields = std::tuple_size_v<base_type>;

    /// Size of the line (in characters) associated to this class
    static constexpr auto line_size =
        reactions::fields::overall_range_t<std::tuple_element_t<
            number_of_fields - 1, fields_type>::range_type>::max;

    pdg_element() = delete;
    explicit pdg_element(pdg_element const &) = default;
    explicit pdg_element(pdg_element &&) = default;
    pdg_element &operator=(pdg_element const &) = default;

    /// Construct the element from an initializer list
    template <class... Args>
    pdg_element(Args &&... args) : base_type{std::forward<Args>(args)...} {}

    /// Construct the element from the contents
    explicit pdg_element(base_type &&other)
        : base_type{std::forward<base_type>(other)} {}

    /*! \brief Compare the ID of the two particles
     *
     * \param other element to compare with
     * \return the result of comparing the PDG IDs of the two elements
     */
    bool operator==(pdg_element const &other) const {
      return pdg_id() == other.pdg_id();
    }

    /// \copydoc pdg_element::operator==
    bool operator!=(pdg_element const &other) const {
      return pdg_id() != other.pdg_id();
    }

    /*! \brief Get an element using an accessor.
     *
     * For fields of \ref std::optional type, the validity of the content
     * must be checked before calling this function using the
     * \ref pdg_element::has member function. Otherwise the
     * \ref reactions::missing_fields_error exception is thrown,
     * if missing.
     *
     * The return type is a constant reference for values without units and
     * a value for those with units.
     */
    template <class Field, class... Subfield>
    units::return_type_t<Field, Subfield...> get() const {
      if constexpr (units::has_units_v<Field, Subfield...>)
        return units::accessor_with_units<Field, Subfield...>(
            pdg_system_of_units::instance(),
            std::get<utils::tuple_index_v<Field, fields_type>>(*this));
      else
        return units::accessor<Field, Subfield...>(
            std::get<utils::tuple_index_v<Field, fields_type>>(*this));
    }

    /// Check whether the given field information is missing or not
    template <class Field> constexpr bool has() const {
      if constexpr (fields::is_optional_field_v<Field>)
        return std::get<utils::tuple_index_v<Field, fields_type>>(*this)
            .has_value();
      else
        return true;
    }

    /// Representation of the element name as a LaTeX string
    std::string latex_name() const {

      const auto &ref = name();
      std::size_t count = 0;
      std::size_t size = ref.size();

      if (size == 0)
        return std::string{};

      // this lambda function allows to simplify the processing of errors
      auto process_latex_string = [&]() {
        auto match_charge = [](char c) {
          return reactions::tokens::match_any<'0', '+', '-'>(c);
        };
        auto match_extra = [](char c) {
          return reactions::tokens::match_any<'*', '\''>(c);
        };
        auto match_number = [](char c) {
          return reactions::tokens::match_range<'0', '9'>(c);
        };
        auto match_lowercase = [](char c) {
          return reactions::tokens::match_range<'a', 'z'>(c);
        };
        auto match_character = [](char c) {
          return reactions::tokens::match_range<'A', 'z'>(c);
        };

        std::string latex;
        std::string superscript_buffer;
        // Avoid reallocations. The constant is based on the
        // maximum size of an expansion of names to LaTeX
        // names.
        //
        // Obtained with: scripts/latex-name-buffers.py
        //
        latex.reserve(4 * ref.size());
        superscript_buffer.reserve(
            5); // maximum number of (', *, 0/+/-) in names

        // add a character or process a Greek letter
        auto process_characters = [&]() {
          latex.push_back(ref[count++]);

          if (count == size)
            return;

          if (match_lowercase(ref[count])) {
            latex.insert(latex.size() - 1, 1, '\\');
            // is a Greek letter
            do {
              latex.push_back(ref[count++]);
            } while (count < size && match_lowercase(ref[count]));
          }
        };

        // add the superscript
        auto process_superscript = [&]() {
          latex.append("^{");
          latex.insert(latex.end(), superscript_buffer.begin(),
                       superscript_buffer.end());
          superscript_buffer.clear();
          latex.push_back('}');
        };

        // ========== process the base name

        process_characters(); // first element is always a character

        if (count == size)
          return latex;

        if (reactions::tokens::match_any<'/'>(ref[count])) {

          // this is needed to process composed names like the J/psi
          latex.push_back(ref[count++]);

          if (count == size)
            return latex;

          if (match_character(ref[count]))
            process_characters();

          if (count == size)
            return latex;
        }

        // ========== process particle/anti-particle information

        if (ref.find('~') != std::string::npos) {
          // it is an anti-particle, so we must tweak the base name
          latex.insert(0, "\\bar{");
          latex.insert(latex.size(), 1, '}');
        }

        // ========== process additional qualifiers

        if (ref[count] == '(' &&
            (!match_number(ref[count + 1]) ||
             ref.find('(', count + 1) != std::string::npos)) {
          // unique subscript
          latex.insert(latex.size(), "_{");
          ++count;
          while (ref[count] != ')') {

            if (match_character(ref[count]))
              process_characters(); // increments the counter
            else
              latex.push_back(ref[count++]);

            if (count == size)
              throw internal_error("Missing parenthesis in name");
          }

          latex.push_back('}');

          if (++count == size) { // process the parenthesis
            if (!superscript_buffer.empty())
              process_superscript();
            return latex;
          }
        }

        if (match_extra(ref[count])) {
          // first or unique superscript
          superscript_buffer.push_back(ref[count++]);
          while (count < size && match_extra(ref[count])) {
            if (reactions::tokens::match_any<'\''>(ref[count])) {
              superscript_buffer.append("\\prime");
              ++count;
            } else if (reactions::tokens::match_any<'*'>(ref[count])) {
              superscript_buffer.append("\\ast");
              ++count;
            } else
              superscript_buffer.push_back(ref[count++]);
          }

          if (count == size) {
            process_superscript();
            return latex;
          }
        }

        // ========== process the resonance mass

        if (ref[count] == '(') {

          // if there is a superscript, add it now
          if (!superscript_buffer.empty())
            process_superscript();

          // parenthesized expression
          latex.push_back(ref[count++]);
          while (ref[count] != ')') {
            latex.push_back(ref[count++]);
            if (count == size)
              throw internal_error("Missing parenthesis in name");
          }
          latex.push_back(ref[count++]); // process ')' (no check is done)

          if (count == size)
            return latex;
        }

        // ========== process the charge (skip the anti-particle token)

        if (match_charge(ref[count]) || ref[count] == '~') {
          // second superscript
          do {
            if (ref[count] == '~') // anti-particle nature is processed above
              ++count;
            else
              superscript_buffer.push_back(ref[count++]);
          } while (count < size &&
                   (match_charge(ref[count]) || ref[count] == '~'));
        }

        if (!superscript_buffer.empty())
          process_superscript();

        return latex;
      };

      auto latex = process_latex_string();

      if (count != size)
        throw reactions::internal_error(
            (std::string{"Failed to process LaTeX string for particle \""} +
             name() + "\"")
                .c_str());

      latex.shrink_to_fit();

      return latex;
    }

    /// Name of the particle
    std::string const &name() const { return get<pdg::name>(); }

    /// PDG ID
    int pdg_id() const { return get<pdg::pdg_id>(); }

    /// Three times the charge, as an integer
    int three_charge() const { return get<pdg::three_charge>(); }

    /// Charge as a doubleing point number
    double charge() const { return get<pdg::three_charge>() / 3.; }

    /// Whether the element is its own charge-conjugate
    bool is_self_cc() const { return get<pdg::is_self_cc>(); }

    /*! Get the mass of the element
     *
     * You must check whether the mass is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double mass() const { return get<pdg::mass, fields::value>(); }

    /// Whether the mass and its errors are defined or not
    bool has_mass() const { return has<pdg::mass>(); }

    /*! \brief Lower mass error
     *
     * You must check whether the mass is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double mass_error_lower() const {
      return get<pdg::mass, fields::error_lower>();
    }

    /*! \brief Upper mass error
     *
     * You must check whether the mass is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double mass_error_upper() const {
      return get<pdg::mass, fields::error_lower>();
    }

    /* \brief Calculate the mass error
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double mass_error() const { return std::sqrt(mass_error_squared()); }

    /* \brief Calculate the mass error squared
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double mass_error_squared() const {

      if (!has<pdg::mass>())
        throw reactions::missing_fields_error(
            ("Unable to access mass errors; mass is not defined for particle" +
             name())
                .c_str());

      auto const el = mass_error_lower();
      auto const eu = mass_error_upper();

      return el * el + eu * eu;
    }

    /*! \brief Get the width of the element.
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double width() const { return get<pdg::width, fields::value>(); }

    /// Whether the width and its errors are defined or not
    bool has_width() const { return has<pdg::width>(); }

    /*! \brief Get the lower width error
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double width_error_lower() const {
      return get<pdg::width, fields::error_lower>();
    }

    /*! \brief Get the upper width error
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double width_error_upper() const {
      return get<pdg::width, fields::error_upper>();
    }

    /*! Calculate the width error
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double width_error() const { return std::sqrt(width_error_squared()); }

    /*! Calculate the width error squared
     *
     * You must check whether the width is defined or not before calling this
     * member function, otherwise a \ref
     * reactions::missing_fields_error is thrown.
     */
    double width_error_squared() const {

      if (!has<pdg::width>())
        throw reactions::missing_fields_error(
            ("Unable to access width errors; width is not defined for "
             "particle" +
             name())
                .c_str());

      auto const el = width_error_lower();
      auto const eu = width_error_upper();

      return el * el + eu * eu;
    }
  };

  /*! \brief Database of elements following the PDG convention
   *
   */
  class pdg_database final
      : public reactions::database::database<pdg_element, pdg::name,
                                             pdg::pdg_id> {

  public:
    using base_type =
        reactions::database::database<pdg_element, pdg::name, pdg::pdg_id>;

    /// Return the charge-conjugate of an element
    pdg_element charge_conjugate(pdg_element const &el) const {

      if (el.is_self_cc())
        return el;
      else
        return operator()(-el.pdg_id());
    }

    /*! \brief Register a new PDG element
     *
     * The new element must have a name and a PDG ID that does not clash with
     * any of the database used.
     *
     * For the LaTeX name to be valid (an to avoid possible exceptions thrown
     * during its computation), the element name must follow the following
     * convention:
     *
     * - The name starts with a set of characters. A capital letter followed by
     * lowercase letters or a set of lowercase letters are considered as a Greek
     * letter.
     * - The base name can be followed by a set of modifiers indicating the
     * flavour, mass eigenstate or spin of the particle, between parenthesis.
     * - After, it is possible to indicate that the particle has a sligh
     * variation with respect to another existing particle or that it
     * corresponds to an excited state, in which it should be indicated with one
     * or various prime symbols for the first case, or an asterisk for the
     * second.
     * - The mass can be indicated between two parentheses as an integral
     * number.
     * - The last part of the name is composed by the possible anti-particle
     * marker, specified with a tilde, and the charge, which can be 0, + or -.
     *
     * There is no official naming scheme for the PDG particles, but the
     * following guidelines can be used in order to get the most common way of
     * naming the particles:
     *
     * - Quarks are specified with a single character, and anti-quarks extend
     * this name by adding a tilde.
     * - If the name refers to a gauge boson, it must only contain the charge if
     * it is named with a captial letter.
     * - Hadrons only contain the charge if there are other entries in the
     * database with the same name. In the case of mesons, they also contain the
     * charge if the particle is not self charge-conjugate.
     * - Particle names referring to mass-eigenstates contain the charge if
     * the corresponding flavour eigenstates do.
     * - The anti-particles of mesons where the charge is in the name are
     * specified using the opposite charge. For the rest, anti-particles are
     * specified by including a tilde before the charge or at the end of the
     * name, where adecuate.
     */
    template <class... Args> void register_element(Args &&... args) {
      return base_type::register_element(std::forward<Args>(args)...);
    }

    /// Create an element accessing by ID
    pdg_element operator()(int id) const override {
      return access<pdg::pdg_id>(id);
    }

    /// Create an element accessing by name
    pdg_element operator()(std::string const &str) const override {
      return access<pdg::name>(str);
    }

    /// Get the only instance of this class
    static pdg_database &instance() {
      static pdg_database db;
      return db;
    }

  private:
    pdg_database() : base_type{"@PDG_TABLE@"} {}
    pdg_database(pdg_database &&) = delete;
    pdg_database(pdg_database const &) = delete;
    void operator=(pdg_database &&) = delete;
    void operator=(pdg_database const &) = delete;
  };
} // namespace reactions
